function [trainedClassifier, validationAccuracy] = trainClassifierPweek2(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% Returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 02-Oct-2020 00:14:15


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'Vendor', 'Passengers', 'Distance', 'PickupLon', 'PickupLat', 'RateCode', 'HeldFlag', 'DropoffLon', 'DropoffLat', 'PayType', 'Fare', 'ExtraCharge', 'Tax', 'Tip', 'Tolls', 'ImpSurcharge', 'TotalCharge', 'Duration', 'AveSpeed', 'TimeOfDay'};
predictors = inputTable(:, predictorNames);
response = inputTable.WasTollPaid;
isCategoricalPredictor = [true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false];

% Data transformation: Select subset of the features
% This code selects the same subset of features as were used in the app.
includedPredictorNames = predictors.Properties.VariableNames([false false false true true true false true true false true false false false false false false false false true]);
predictors = predictors(:,includedPredictorNames);
isCategoricalPredictor = isCategoricalPredictor([false false false true true true false true true false true false false false false false false false false true]);

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
% For logistic regression, the response values are assumed to follow a
% binomial distribution.
successClass = true;
failureClass = false;
% Compute the majority response class. If there is a NaN-prediction from
% fitglm, convert NaN to this majority class label.
numSuccess = sum(response);
numFailure = sum(~response);
if numSuccess > numFailure
    missingClass = successClass;
else
    missingClass = failureClass;
end
successFailureAndMissingClasses = [successClass; failureClass; missingClass];
zeroOneResponse = response;
% Prepare input arguments to fitglm.
concatenatedPredictorsAndResponse = [predictors, table(zeroOneResponse)];
% Train using fitglm.
GeneralizedLinearModel = fitglm(...
    concatenatedPredictorsAndResponse, ...
    'Distribution', 'binomial', ...
    'link', 'logit');

% Convert predicted probabilities to predicted class labels and scores.
convertSuccessProbsToPredictions = @(p) successFailureAndMissingClasses( ~isnan(p).*( (p<0.5) + 1 ) + isnan(p)*3 );
returnMultipleValuesFcn = @(varargin) varargin{1:max(1,nargout)};
scoresFcn = @(p) [1-p, p];
predictionsAndScoresFcn = @(p) returnMultipleValuesFcn( convertSuccessProbsToPredictions(p), scoresFcn(p) );

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
featureSelectionFcn = @(x) x(:,includedPredictorNames);
logisticRegressionPredictFcn = @(x) predictionsAndScoresFcn( predict(GeneralizedLinearModel, x) );
trainedClassifier.predictFcn = @(x) logisticRegressionPredictFcn(featureSelectionFcn(predictorExtractionFcn(x)));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'AveSpeed', 'Distance', 'DropoffLat', 'DropoffLon', 'Duration', 'ExtraCharge', 'Fare', 'HeldFlag', 'ImpSurcharge', 'Passengers', 'PayType', 'PickupLat', 'PickupLon', 'RateCode', 'Tax', 'TimeOfDay', 'Tip', 'Tolls', 'TotalCharge', 'Vendor'};
trainedClassifier.GeneralizedLinearModel = GeneralizedLinearModel;
trainedClassifier.SuccessClass = successClass;
trainedClassifier.FailureClass = failureClass;
trainedClassifier.MissingClass = missingClass;
trainedClassifier.ClassNames = {successClass; failureClass};
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2020a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'Vendor', 'Passengers', 'Distance', 'PickupLon', 'PickupLat', 'RateCode', 'HeldFlag', 'DropoffLon', 'DropoffLat', 'PayType', 'Fare', 'ExtraCharge', 'Tax', 'Tip', 'Tolls', 'ImpSurcharge', 'TotalCharge', 'Duration', 'AveSpeed', 'TimeOfDay'};
predictors = inputTable(:, predictorNames);
response = inputTable.WasTollPaid;
isCategoricalPredictor = [true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false];

validationPredictFcn = @(x) logisticRegressionPredictFcn(featureSelectionFcn(x));

% Compute resubstitution predictions
[validationPredictions, validationScores] = validationPredictFcn(predictors);

% Compute validation accuracy
correctPredictions = (validationPredictions == response);
validationAccuracy = sum(correctPredictions)/length(correctPredictions);
